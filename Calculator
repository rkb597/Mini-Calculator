import javax.swing.*;
import java.awt.*;
import javax.swing.border.LineBorder;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;

public class Calculator extends JFrame implements ActionListener {

    private final DecimalFormat df = new DecimalFormat("#,###.00");

    private final String[] symbols = {

            "AC", "+/-", "%", "รท",
            "7", "8", "9", "x",
            "4", "5", "6", "-",
            "1", "2", "3", "+",
            "0", ".", "Del", "="
    };
    private int operator = 0;
    private final JPanel panel = new JPanel(new BorderLayout(5,5));
    private final JPanel btnPanel = new JPanel(new GridLayout(5,3,2,2));
    private final JButton[] buttons = new JButton[20];
    private final JTextArea screen = new JTextArea(5,40);
    private double firstNum = 0;
    private final JTextField calculatingTf = new JTextField(40);

    public Calculator() {
        init();
    }

    private void init() {

        Font font1 = new Font("Times New Roman", Font.BOLD, 20);
        screen.setFont(font1);
        setTitle("Calculator");
        screen.setBackground(Color.BLACK);
        panel.setBackground(Color.BLACK);
        btnPanel.setBackground(Color.BLACK);
        screen.setForeground(Color.WHITE);

        for(int i = 0; i < buttons.length; i++) {
            buttons[i] = new JButton(symbols[i]);

            buttons[i].setOpaque(false);
            buttons[i].setBorderPainted(false);
            buttons[i].setBackground(Color.BLACK);
            buttons[i].setForeground(Color.WHITE);
            buttons[i].addActionListener(this);
            btnPanel.add(buttons[i]);
        }

        calculatingTf.setForeground(Color.WHITE);
        calculatingTf.setBackground(Color.BLACK);
        calculatingTf.setBorder(new LineBorder(Color.BLACK,0));
        calculatingTf.setFont(font1);

        panel.add(calculatingTf, BorderLayout.SOUTH);
        panel.add(btnPanel, BorderLayout.CENTER);
        panel.add(screen, BorderLayout.NORTH);
        add(panel);
        setSize(340,400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
    }

    public static void main(String[] args) {
        new Calculator();
    }

    @Override
    public void actionPerformed(ActionEvent e) {

        String cmd = e.getActionCommand();

        switch (cmd) {

            case ".":
                if(!screen.getText().contains(".")) {
                    screen.setText(screen.getText() + ".");
                }
                break;
            case "0":
                screen.setText(screen.getText() + "0");
                break;
            case "1":
                screen.setText(screen.getText() + "1");
                break;
            case "2":
                screen.setText(screen.getText() + "2");
                break;
            case "3":
                screen.setText(screen.getText() + "3");
                break;
            case "4":
                screen.setText(screen.getText() + "4");
                break;
            case "5":
                screen.setText(screen.getText() + "5");
                break;
            case "6":
                screen.setText(screen.getText() + "6");
                break;
            case "7":
                screen.setText(screen.getText() + "7");
                break;
            case "8":
                screen.setText(screen.getText() + "8");
                break;
            case "9":
                screen.setText(screen.getText() + "9");
                break;
            case "+":
                if(!screen.getText().isEmpty()) {
                    firstNum = Double.parseDouble(screen.getText());
                    operator = 1;
                    screen.setText("");
                }
                break;
            case "-":
                if(!screen.getText().isEmpty()) {
                    firstNum = Double.parseDouble(screen.getText());
                    operator = 2;
                    screen.setText("");
                }
                break;
            case "x":
                if(!screen.getText().isEmpty()) {
                    firstNum = Double.parseDouble(screen.getText());
                    operator = 3;
                    screen.setText("");
                }
                break;
            case "รท":
                if(!screen.getText().isEmpty()) {
                    firstNum = Double.parseDouble(screen.getText());
                    operator = 4;
                    screen.setText("");
                }
                break;
            case "%":
                double num = Double.parseDouble(screen.getText());
                screen.setText(String.valueOf(num / 100.0));
                break;
            case "+/-":
                double neg = Double.parseDouble(screen.getText());
                neg *= -1;
                screen.setText(String.valueOf(neg));
                break;
            case "AC":
                screen.setText("");
                calculatingTf.setText("");
                break;
            case "Del" :
                if(!screen.getText().isEmpty()) {
                    StringBuilder sb = new StringBuilder(screen.getText());
                    sb.deleteCharAt(sb.length() - 1);
                    screen.setText(sb.toString());
                }
                break;

            default:
        }

        if(cmd.equalsIgnoreCase("=")) {

            if(!screen.getText().isEmpty()) {
                double secondNum = Double.parseDouble(screen.getText());

                switch (operator) {
                    case 1 -> { // addition
                        screen.setText(String.valueOf(firstNum + secondNum));
                        calculatingTf.setText(firstNum + " + " + secondNum + " = " + (df.format(firstNum + secondNum)));
                    }
                    case 2 -> { // subtraction
                        screen.setText(String.valueOf(firstNum - secondNum));
                        calculatingTf.setText(firstNum + " - " + secondNum + " = " + df.format((firstNum - secondNum)));
                    }
                    case 3 -> { // multiplication
                        screen.setText(String.valueOf(firstNum * secondNum));
                        calculatingTf.setText(firstNum + " x " + secondNum + " = " + df.format((firstNum * secondNum)));
                    }
                    case 4 -> { // division
                        screen.setText(String.valueOf(firstNum / secondNum));
                        calculatingTf.setText(firstNum + " รท " + secondNum + " = " + df.format((firstNum / secondNum)));
                    }
                    default -> {

                    }
                }
            }
        }

    }
}
